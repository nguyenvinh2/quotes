/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import org.junit.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import static org.junit.Assert.*;

public class AppTest {
    @Test
    public void getFirstQuoteTest() {
        String path = "src/main/resources/recentquotes.json";
        Quote[] result = App.getAllLocalQuotes(path);
        List<String> expected = new ArrayList<>();
        expected.add("attributed-no-source");
        assertEquals(expected, result[0].getTags());
        assertEquals("Marilyn Monroe", result[0].getAuthor());
        assertEquals("18651 likes", result[0].getLikes());
        assertEquals(" “I am good, but not an angel. I do sin, but I am not the devil. I am just a small girl in a big world trying to find someone to love.” ", result[0].getText());
    }


    @Test
    public void getQuoteTypeTest() {
        String path = "src/main/resources/recentquotes.json";
        String result = App.getLocalQuote(path);
        assertTrue(result instanceof String);
    }

    @Test
    public void requestQuoteTest() {
        String site = "http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en";
        String result = App.requestQuote(site);
        assertTrue(result instanceof String);

    }

    @Test
    public void requestQuoteAddLocallyTest() {
        String site = "http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en";
        String resultQuote = App.requestQuote(site);
        Quote[] expected = new Quote[]{};
        String path = "src/main/resources/recentquotes.json";
        try {
            expected = new Gson().fromJson(new Scanner(new File(path)).useDelimiter("\\A").next(), Quote[].class);
        } catch(Exception e) {

        }
        String expectedLine = expected[expected.length -1].getText() + " - " + expected[expected.length-1].getAuthor();
        assertEquals(expectedLine, resultQuote);
    }

    @Test
    public void httpConnectionTestSuccess() {
        String site = "http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en";
        int code = 0;
        try {
            URL url = new URL(site);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.connect();
            code = connection.getResponseCode();
        } catch(Exception e) {
            e.printStackTrace();
        }
        assertEquals(200, code);
    }

    @Test
    public void addQuoteToFileTest() {
        Quote[] result = new Quote[]{};
        String path = "src/main/resources/recentquotes.json";
        Quote quote = new Quote("Vinh says this test sucks", "Vinh");
        App.addQuoteToFile(quote, path);
        try {
            result = new Gson().fromJson(new Scanner(new File(path)).useDelimiter("\\A").next(), Quote[].class);
        } catch(Exception e) {

        }
        assertEquals(quote.getText(), result[result.length-1].getText());
        assertEquals(quote.getAuthor(), result[result.length-1].getAuthor());
    }
}
